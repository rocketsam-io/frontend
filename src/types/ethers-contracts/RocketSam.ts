/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RocketSamInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ERROR_INCORRECT_FEE_VALUES"
      | "ERROR_INVALID_BALANCE"
      | "ERROR_INVALID_COLLECTOR"
      | "ERROR_INVALID_DEPOSIT"
      | "ERROR_INVALID_REFERRER"
      | "ERROR_INVALID_REF_BIPS"
      | "ERROR_INVALID_REF_EARNINGS"
      | "ERROR_NOT_FEE_COLLECTOR"
      | "ONE_HUNDRED_PERCENT"
      | "acceptOwnership"
      | "addressStatistic"
      | "balances"
      | "claimFeeEarnings"
      | "claimReferrerEarnings"
      | "commonRefBips"
      | "deposit"
      | "depositWithReferrer"
      | "depositsCount"
      | "depositsVolume"
      | "estimateProtocolFee"
      | "estimateReferrerShare"
      | "fee"
      | "feeClaimed"
      | "feeCollector"
      | "feeEarned"
      | "maxFee"
      | "owner"
      | "pause"
      | "paused"
      | "pendingOwner"
      | "poolId"
      | "referrerBips"
      | "referrers"
      | "renounceOwnership"
      | "setCommonRefBips"
      | "setFee"
      | "setFeeCollector"
      | "setMaxFee"
      | "setRefBips"
      | "setRefBipsBatch"
      | "transferOwnership"
      | "unpause"
      | "values"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CommonRefBipsChanged"
      | "Deposit"
      | "FeeChanged"
      | "FeeCollectorChanged"
      | "FeeEarningsClaimed"
      | "MaxFeeChanged"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "Paused"
      | "ReferralEarningsClaimed"
      | "ReferrerBipsChanged"
      | "ReferrersBatchBipsChanged"
      | "Unpaused"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ERROR_INCORRECT_FEE_VALUES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERROR_INVALID_BALANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERROR_INVALID_COLLECTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERROR_INVALID_DEPOSIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERROR_INVALID_REFERRER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERROR_INVALID_REF_BIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERROR_INVALID_REF_EARNINGS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERROR_NOT_FEE_COLLECTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_HUNDRED_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressStatistic",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFeeEarnings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimReferrerEarnings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commonRefBips",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithReferrer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositsVolume",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateReferrerShare",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fee", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "feeClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeEarned", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "referrerBips",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "referrers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCommonRefBips",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRefBips",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRefBipsBatch",
    values: [AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "values",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ERROR_INCORRECT_FEE_VALUES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERROR_INVALID_BALANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERROR_INVALID_COLLECTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERROR_INVALID_DEPOSIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERROR_INVALID_REFERRER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERROR_INVALID_REF_BIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERROR_INVALID_REF_EARNINGS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERROR_NOT_FEE_COLLECTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_HUNDRED_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressStatistic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimFeeEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReferrerEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commonRefBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositWithReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositsVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateReferrerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeEarned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referrerBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "referrers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommonRefBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMaxFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRefBips", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRefBipsBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "values", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace CommonRefBipsChangedEvent {
  export type InputTuple = [oldRefBips: BigNumberish, newRefBips: BigNumberish];
  export type OutputTuple = [oldRefBips: bigint, newRefBips: bigint];
  export interface OutputObject {
    oldRefBips: bigint;
    newRefBips: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    depositer: AddressLike,
    feeEarned: BigNumberish,
    amount: BigNumberish,
    balance: BigNumberish,
    referrer: AddressLike,
    referrerShare: BigNumberish
  ];
  export type OutputTuple = [
    depositer: string,
    feeEarned: bigint,
    amount: bigint,
    balance: bigint,
    referrer: string,
    referrerShare: bigint
  ];
  export interface OutputObject {
    depositer: string;
    feeEarned: bigint;
    amount: bigint;
    balance: bigint;
    referrer: string;
    referrerShare: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeChangedEvent {
  export type InputTuple = [valuesCount: BigNumberish, maxFee: BigNumberish];
  export type OutputTuple = [valuesCount: bigint, maxFee: bigint];
  export interface OutputObject {
    valuesCount: bigint;
    maxFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeCollectorChangedEvent {
  export type InputTuple = [
    oldFeeCollector: AddressLike,
    newFeeCollector: AddressLike
  ];
  export type OutputTuple = [oldFeeCollector: string, newFeeCollector: string];
  export interface OutputObject {
    oldFeeCollector: string;
    newFeeCollector: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeEarningsClaimedEvent {
  export type InputTuple = [feeCollector: AddressLike, amount: BigNumberish];
  export type OutputTuple = [feeCollector: string, amount: bigint];
  export interface OutputObject {
    feeCollector: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxFeeChangedEvent {
  export type InputTuple = [oldMaxFee: BigNumberish, newMaxFee: BigNumberish];
  export type OutputTuple = [oldMaxFee: bigint, newMaxFee: bigint];
  export interface OutputObject {
    oldMaxFee: bigint;
    newMaxFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralEarningsClaimedEvent {
  export type InputTuple = [referrer: AddressLike, amount: BigNumberish];
  export type OutputTuple = [referrer: string, amount: bigint];
  export interface OutputObject {
    referrer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferrerBipsChangedEvent {
  export type InputTuple = [
    referrer: AddressLike,
    oldRefBips: BigNumberish,
    newRefBips: BigNumberish
  ];
  export type OutputTuple = [
    referrer: string,
    oldRefBips: bigint,
    newRefBips: bigint
  ];
  export interface OutputObject {
    referrer: string;
    oldRefBips: bigint;
    newRefBips: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferrersBatchBipsChangedEvent {
  export type InputTuple = [referrers: AddressLike[], newRefBips: BigNumberish];
  export type OutputTuple = [referrers: string[], newRefBips: bigint];
  export interface OutputObject {
    referrers: string[];
    newRefBips: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [depositer: AddressLike, amount: BigNumberish];
  export type OutputTuple = [depositer: string, amount: bigint];
  export interface OutputObject {
    depositer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RocketSam extends BaseContract {
  connect(runner?: ContractRunner | null): RocketSam;
  waitForDeployment(): Promise<this>;

  interface: RocketSamInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ERROR_INCORRECT_FEE_VALUES: TypedContractMethod<[], [bigint], "view">;

  ERROR_INVALID_BALANCE: TypedContractMethod<[], [bigint], "view">;

  ERROR_INVALID_COLLECTOR: TypedContractMethod<[], [bigint], "view">;

  ERROR_INVALID_DEPOSIT: TypedContractMethod<[], [bigint], "view">;

  ERROR_INVALID_REFERRER: TypedContractMethod<[], [bigint], "view">;

  ERROR_INVALID_REF_BIPS: TypedContractMethod<[], [bigint], "view">;

  ERROR_INVALID_REF_EARNINGS: TypedContractMethod<[], [bigint], "view">;

  ERROR_NOT_FEE_COLLECTOR: TypedContractMethod<[], [bigint], "view">;

  ONE_HUNDRED_PERCENT: TypedContractMethod<[], [bigint], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  addressStatistic: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { depositsCount: bigint; depositsVolume: bigint }],
    "view"
  >;

  balances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  claimFeeEarnings: TypedContractMethod<[], [void], "nonpayable">;

  claimReferrerEarnings: TypedContractMethod<[], [void], "nonpayable">;

  commonRefBips: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<[_amount: BigNumberish], [void], "payable">;

  depositWithReferrer: TypedContractMethod<
    [_referrer: AddressLike, _amount: BigNumberish],
    [void],
    "payable"
  >;

  depositsCount: TypedContractMethod<[], [bigint], "view">;

  depositsVolume: TypedContractMethod<[], [bigint], "view">;

  estimateProtocolFee: TypedContractMethod<
    [_value: BigNumberish],
    [bigint],
    "view"
  >;

  estimateReferrerShare: TypedContractMethod<
    [_referrer: AddressLike, _amount: BigNumberish],
    [bigint],
    "view"
  >;

  fee: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  feeClaimed: TypedContractMethod<[], [bigint], "view">;

  feeCollector: TypedContractMethod<[], [string], "view">;

  feeEarned: TypedContractMethod<[], [bigint], "view">;

  maxFee: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  poolId: TypedContractMethod<[], [bigint], "view">;

  referrerBips: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  referrers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        txCount: bigint;
        earnedAmount: bigint;
        claimedAmount: bigint;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setCommonRefBips: TypedContractMethod<
    [_commonRefBips: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFee: TypedContractMethod<
    [_values: BigNumberish[], _fees: BigNumberish[], _maxFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeCollector: TypedContractMethod<
    [_feeCollector: AddressLike],
    [void],
    "nonpayable"
  >;

  setMaxFee: TypedContractMethod<[_maxFee: BigNumberish], [void], "nonpayable">;

  setRefBips: TypedContractMethod<
    [_referrer: AddressLike, _refBips: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRefBipsBatch: TypedContractMethod<
    [_referrers: AddressLike[], _refBips: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  values: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ERROR_INCORRECT_FEE_VALUES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ERROR_INVALID_BALANCE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ERROR_INVALID_COLLECTOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ERROR_INVALID_DEPOSIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ERROR_INVALID_REFERRER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ERROR_INVALID_REF_BIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ERROR_INVALID_REF_EARNINGS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ERROR_NOT_FEE_COLLECTOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ONE_HUNDRED_PERCENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addressStatistic"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { depositsCount: bigint; depositsVolume: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimFeeEarnings"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimReferrerEarnings"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "commonRefBips"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "depositWithReferrer"
  ): TypedContractMethod<
    [_referrer: AddressLike, _amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositsVolume"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "estimateProtocolFee"
  ): TypedContractMethod<[_value: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "estimateReferrerShare"
  ): TypedContractMethod<
    [_referrer: AddressLike, _amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeClaimed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeCollector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeEarned"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "referrerBips"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "referrers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        txCount: bigint;
        earnedAmount: bigint;
        claimedAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCommonRefBips"
  ): TypedContractMethod<[_commonRefBips: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<
    [_values: BigNumberish[], _fees: BigNumberish[], _maxFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeCollector"
  ): TypedContractMethod<[_feeCollector: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxFee"
  ): TypedContractMethod<[_maxFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRefBips"
  ): TypedContractMethod<
    [_referrer: AddressLike, _refBips: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRefBipsBatch"
  ): TypedContractMethod<
    [_referrers: AddressLike[], _refBips: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "values"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "CommonRefBipsChanged"
  ): TypedContractEvent<
    CommonRefBipsChangedEvent.InputTuple,
    CommonRefBipsChangedEvent.OutputTuple,
    CommonRefBipsChangedEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "FeeChanged"
  ): TypedContractEvent<
    FeeChangedEvent.InputTuple,
    FeeChangedEvent.OutputTuple,
    FeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "FeeCollectorChanged"
  ): TypedContractEvent<
    FeeCollectorChangedEvent.InputTuple,
    FeeCollectorChangedEvent.OutputTuple,
    FeeCollectorChangedEvent.OutputObject
  >;
  getEvent(
    key: "FeeEarningsClaimed"
  ): TypedContractEvent<
    FeeEarningsClaimedEvent.InputTuple,
    FeeEarningsClaimedEvent.OutputTuple,
    FeeEarningsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "MaxFeeChanged"
  ): TypedContractEvent<
    MaxFeeChangedEvent.InputTuple,
    MaxFeeChangedEvent.OutputTuple,
    MaxFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralEarningsClaimed"
  ): TypedContractEvent<
    ReferralEarningsClaimedEvent.InputTuple,
    ReferralEarningsClaimedEvent.OutputTuple,
    ReferralEarningsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "ReferrerBipsChanged"
  ): TypedContractEvent<
    ReferrerBipsChangedEvent.InputTuple,
    ReferrerBipsChangedEvent.OutputTuple,
    ReferrerBipsChangedEvent.OutputObject
  >;
  getEvent(
    key: "ReferrersBatchBipsChanged"
  ): TypedContractEvent<
    ReferrersBatchBipsChangedEvent.InputTuple,
    ReferrersBatchBipsChangedEvent.OutputTuple,
    ReferrersBatchBipsChangedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "CommonRefBipsChanged(uint16,uint16)": TypedContractEvent<
      CommonRefBipsChangedEvent.InputTuple,
      CommonRefBipsChangedEvent.OutputTuple,
      CommonRefBipsChangedEvent.OutputObject
    >;
    CommonRefBipsChanged: TypedContractEvent<
      CommonRefBipsChangedEvent.InputTuple,
      CommonRefBipsChangedEvent.OutputTuple,
      CommonRefBipsChangedEvent.OutputObject
    >;

    "Deposit(address,uint256,uint256,uint256,address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "FeeChanged(uint256,uint256)": TypedContractEvent<
      FeeChangedEvent.InputTuple,
      FeeChangedEvent.OutputTuple,
      FeeChangedEvent.OutputObject
    >;
    FeeChanged: TypedContractEvent<
      FeeChangedEvent.InputTuple,
      FeeChangedEvent.OutputTuple,
      FeeChangedEvent.OutputObject
    >;

    "FeeCollectorChanged(address,address)": TypedContractEvent<
      FeeCollectorChangedEvent.InputTuple,
      FeeCollectorChangedEvent.OutputTuple,
      FeeCollectorChangedEvent.OutputObject
    >;
    FeeCollectorChanged: TypedContractEvent<
      FeeCollectorChangedEvent.InputTuple,
      FeeCollectorChangedEvent.OutputTuple,
      FeeCollectorChangedEvent.OutputObject
    >;

    "FeeEarningsClaimed(address,uint256)": TypedContractEvent<
      FeeEarningsClaimedEvent.InputTuple,
      FeeEarningsClaimedEvent.OutputTuple,
      FeeEarningsClaimedEvent.OutputObject
    >;
    FeeEarningsClaimed: TypedContractEvent<
      FeeEarningsClaimedEvent.InputTuple,
      FeeEarningsClaimedEvent.OutputTuple,
      FeeEarningsClaimedEvent.OutputObject
    >;

    "MaxFeeChanged(uint256,uint256)": TypedContractEvent<
      MaxFeeChangedEvent.InputTuple,
      MaxFeeChangedEvent.OutputTuple,
      MaxFeeChangedEvent.OutputObject
    >;
    MaxFeeChanged: TypedContractEvent<
      MaxFeeChangedEvent.InputTuple,
      MaxFeeChangedEvent.OutputTuple,
      MaxFeeChangedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ReferralEarningsClaimed(address,uint256)": TypedContractEvent<
      ReferralEarningsClaimedEvent.InputTuple,
      ReferralEarningsClaimedEvent.OutputTuple,
      ReferralEarningsClaimedEvent.OutputObject
    >;
    ReferralEarningsClaimed: TypedContractEvent<
      ReferralEarningsClaimedEvent.InputTuple,
      ReferralEarningsClaimedEvent.OutputTuple,
      ReferralEarningsClaimedEvent.OutputObject
    >;

    "ReferrerBipsChanged(address,uint16,uint16)": TypedContractEvent<
      ReferrerBipsChangedEvent.InputTuple,
      ReferrerBipsChangedEvent.OutputTuple,
      ReferrerBipsChangedEvent.OutputObject
    >;
    ReferrerBipsChanged: TypedContractEvent<
      ReferrerBipsChangedEvent.InputTuple,
      ReferrerBipsChangedEvent.OutputTuple,
      ReferrerBipsChangedEvent.OutputObject
    >;

    "ReferrersBatchBipsChanged(address[],uint16)": TypedContractEvent<
      ReferrersBatchBipsChangedEvent.InputTuple,
      ReferrersBatchBipsChangedEvent.OutputTuple,
      ReferrersBatchBipsChangedEvent.OutputObject
    >;
    ReferrersBatchBipsChanged: TypedContractEvent<
      ReferrersBatchBipsChangedEvent.InputTuple,
      ReferrersBatchBipsChangedEvent.OutputTuple,
      ReferrersBatchBipsChangedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Withdraw(address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
